#ifndef ASSEMBLY_PROGRAM_H
#define ASSEMBLY_PROGRAM_H

#include <string>

/**
 * \brief A program which returns a specific value.
 *
 * Generated by:
 *
 * ```
 * int main() {
 *   return 1;
 * }
 * ```
 */
extern const std::string progReturns;

/**
 * \brief A program which returns the bigger of two numbers.
 *
 * Generated by:
 * ```
 * int max(int lhs, int rhs) {
 *   return lhs > rhs ? lhs : rhs;
 * }
 *
 * int main() {
 *   int x = 1;
 *   int y = 2;
 *
 *   return max(x, y);
 * }
 * ```
 */
extern const std::string progTwoNumMax;

/**
 * \brief A program which performs summation by loop.
 *
 * Generated by:
 * ```
 * int sum(int i) {
 *   int acc = 0;
 *   for (int s = 0; s < i; ++s) {
 *     acc += s;
 *   }
 *   return acc;
 * }
 *
 * int main() {
 *   return sum(10);
 * }
 * ```
 */
extern const std::string progIterativeAdd;

/**
 * \brief A program which performs summation by recursion.
 *
 * Generated by:
 * ```
 * int sum(int i) {
 *   if (i <= 0) return 0;
 *
 *   return i + sum(i - 1);
 * }
 *
 * int main() {
 *   return sum(10);
 * }
 * ```
 */
extern const std::string progRecursiveAdd;

/**
 * \brief Runs a program which tests the correctness of `nop` instruction.
 *
 * \return `true` if the test passes.
 */
bool testNopProgram();
/**
 * \brief Runs a program which tests the correctness of `mov` instruction.
 *
 * \return `true` if the test passes.
 */
bool testMovProgram();
/**
 * \brief Runs a program which tests the correctness of `str` instruction.
 *
 * \return `true` if the test passes.
 */
bool testStrProgram();
/**
 * \brief Runs a program which tests the correctness of `ldr` instruction.
 *
 * \return `true` if the test passes.
 */
bool testLdrProgram();
/**
 * \brief Runs a program which tests the correctness of `push` instruction.
 *
 * \return `true` if the test passes.
 */
bool testPushProgram();
/**
 * \brief Runs a program which tests the correctness of `pop` instruction.
 *
 * \return `true` if the test passes.
 */
bool testPopProgram();
/**
 * \brief Runs a program which tests the correctness of `add` instruction.
 *
 * \return `true` if the test passes.
 */
bool testAddProgram();
/**
 * \brief Runs a program which tests the correctness of `sub` instruction.
 *
 * \return `true` if the test passes.
 */
bool testSubProgram();

#endif  // ASSEMBLY_PROGRAM_H
